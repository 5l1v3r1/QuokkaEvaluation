`default_nettype none
// PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
// * This file was generated by Quokka FPGA Toolkit.
// * Generated code is your property, do whatever you want with it
// * Place custom code between [BEGIN USER ***] and [END USER ***].
// * CAUTION: All code outside of [USER] scope is subject to regeneration.
// * Bad things happen sometimes in developer's life,
//   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
// * Internal structure of code is subject to change.
//   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
// * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
// * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
// 
// DISCLAIMER:
//   Code comes AS-IS, it is your responsibility to make sure it is working as expected
//   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
// 
// System configuration name is RegistersModule_TopLevel, clock frequency is 1Hz, Top-level
// FSM summary
// -- Packages
module RegistersModule_TopLevel (
// [BEGIN USER PORTS]
// [END USER PORTS]

	input  Clock,
	input  Reset,
	input  WE,
	input  [4: 0] WriteAddress,
	input  [31: 0] WriteData,
	input  [4: 0] ReadAddress,
	output [31: 0] ReadData
    );

// [BEGIN USER SIGNALS]
// [END USER SIGNALS]
localparam HiSignal = 1'b1;
localparam LoSignal = 1'b0;
wire  Zero = 1'b0;
wire  One = 1'b1;
wire  true = 1'b1;
wire  false = 1'b0;
wire  RegistersModule_L27F9L34T10_RegistersModule_L28F58T59_Expr = 1'b0;
wire  Inputs_WE;
wire  [5:1] Inputs_WriteAddress;
wire  [32:1] Inputs_WriteData;
wire  [5:1] Inputs_ReadAddress;
wire  RegistersModule_L27F9L34T10_we;
reg  [32:1] State_ReadData = 32'b00000000000000000000000000000000;
wire  RegistersModule_L27F9L34T10_RegistersModule_L28F22T59_Expr;
wire  RegistersModule_L27F9L34T10_RegistersModule_L28F22T59_Expr_1;
wire  RegistersModule_L27F9L34T10_RegistersModule_L28F22T59_Expr_2;
wire  RegistersModule_L27F9L34T10_RegistersModule_L28F35T59_Expr;
wire signed  [6:1] RegistersModule_L27F9L34T10_RegistersModule_L28F35T59_ExprLhs;
wire signed  [6:1] RegistersModule_L27F9L34T10_RegistersModule_L28F35T59_ExprRhs;
reg [32:1] State_x [0 : 31];
initial
begin
	integer i;
	for (i = 0; i < 32; i = i + 1)
		State_x[i] = 0;
end
assign RegistersModule_L27F9L34T10_RegistersModule_L28F35T59_Expr = RegistersModule_L27F9L34T10_RegistersModule_L28F35T59_ExprLhs != RegistersModule_L27F9L34T10_RegistersModule_L28F35T59_ExprRhs ? 1'b1 : 1'b0;
assign RegistersModule_L27F9L34T10_RegistersModule_L28F22T59_Expr = RegistersModule_L27F9L34T10_RegistersModule_L28F22T59_Expr_1 & RegistersModule_L27F9L34T10_RegistersModule_L28F22T59_Expr_2;
// inferred simple dual port RAM with read-first behaviour
always @ (posedge Clock)
begin
	if (RegistersModule_L27F9L34T10_we)
		State_x[Inputs_WriteAddress] <= Inputs_WriteData;

	State_ReadData <= State_x[Inputs_ReadAddress];
end

assign RegistersModule_L27F9L34T10_RegistersModule_L28F35T59_ExprLhs = { {1{1'b0}}, Inputs_WriteAddress }/*expand*/;
assign RegistersModule_L27F9L34T10_RegistersModule_L28F35T59_ExprRhs = { {5{1'b0}}, RegistersModule_L27F9L34T10_RegistersModule_L28F58T59_Expr }/*expand*/;
assign RegistersModule_L27F9L34T10_RegistersModule_L28F22T59_Expr_1 = Inputs_WE;
assign RegistersModule_L27F9L34T10_RegistersModule_L28F22T59_Expr_2 = RegistersModule_L27F9L34T10_RegistersModule_L28F35T59_Expr;
assign Inputs_WE = WE;
assign Inputs_WriteAddress = WriteAddress/*cast*/;
assign Inputs_WriteData = WriteData/*cast*/;
assign Inputs_ReadAddress = ReadAddress/*cast*/;
assign RegistersModule_L27F9L34T10_we = RegistersModule_L27F9L34T10_RegistersModule_L28F22T59_Expr;
assign ReadData = State_ReadData/*cast*/;
// [BEGIN USER ARCHITECTURE]
// [END USER ARCHITECTURE]
endmodule
