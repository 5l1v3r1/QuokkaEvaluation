// PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
// * This file was generated by Quokka FPGA Toolkit.
// * Generated code is your property, do whatever you want with it
// * Place custom code between [BEGIN USER ***] and [END USER ***].
// * CAUTION: All code outside of [USER] scope is subject to regeneration.
// * Bad things happen sometimes in developer's life,
//   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
// * Internal structure of code is subject to change.
//   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
// * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
// * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
// 
// DISCLAIMER:
//   Code comes AS-IS, it is your responsibility to make sure it is working as expected
//   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
// 
// System configuration name is EmitterModule_TopLevel, clock frequency is 1Hz, Top-level
// FSM summary
// -- Packages
module EmitterModule_TopLevel (
// [BEGIN USER PORTS]
// [END USER PORTS]

	input  Clock,
	input  Reset,
	input  EmitterModuleIsEnabled,
	input  EmitterModuleAck,
	output [8: 1] EmitterModuleData,
	output EmitterModuleHasData
    );

// [BEGIN USER SIGNALS]
// [END USER SIGNALS]
localparam HiSignal = 1'b1;
localparam LoSignal = 1'b0;
wire  EmitterModule_TopLevel_Clock;
wire  EmitterModule_TopLevel_Reset;
wire  EmitterModule_TopLevel_EmitterModuleIsEnabled;
wire  EmitterModule_TopLevel_EmitterModuleAck;
wire  [8:1] EmitterModule_TopLevel_EmitterModuleData;
wire  EmitterModule_TopLevel_EmitterModuleHasData;
wire  EmitterModule_TopLevel_EmitterModule_Clock;
wire  EmitterModule_TopLevel_EmitterModule_Reset;
wire  EmitterModule_TopLevel_EmitterModule_IsEnabled;
wire  EmitterModule_TopLevel_EmitterModule_Ack;
wire  [8:1] EmitterModule_TopLevel_EmitterModule_Data;
wire  EmitterModule_TopLevel_EmitterModule_HasData;
wire  EmitterModule_TopLevel_EmitterModule_Zero = 1'b0;
wire  EmitterModule_TopLevel_EmitterModule_One = 1'b1;
wire  EmitterModule_TopLevel_EmitterModule_true = 1'b1;
wire  EmitterModule_TopLevel_EmitterModule_false = 1'b0;
wire  EmitterModule_TopLevel_EmitterModule_EmitterModule_L8F45T64_Expr = 1'b0;
wire  EmitterModule_TopLevel_EmitterModule_Inputs_IsEnabled;
wire  EmitterModule_TopLevel_EmitterModule_Inputs_Ack;
wire signed  [32:1] EmitterModule_TopLevel_EmitterModule_State_FSM;
wire signed  [32:1] EmitterModule_TopLevel_EmitterModule_State_FSMDefault = 32'b00000000000000000000000000000000;
reg  EmitterModule_TopLevel_EmitterModule_State_FSMWriteEnable = 1'b0;
wire signed  [32:1] EmitterModule_TopLevel_EmitterModule_NextState_FSM;
wire signed  [32:1] EmitterModule_TopLevel_EmitterModule_NextState_FSMDefault = 32'b00000000000000000000000000000000;
reg  EmitterModule_TopLevel_EmitterModule_NextState_FSMWriteEnable = 1'b0;
wire  [8:1] EmitterModule_TopLevel_EmitterModule_State_Data;
wire  [8:1] EmitterModule_TopLevel_EmitterModule_State_DataDefault = 8'b00000000;
reg  EmitterModule_TopLevel_EmitterModule_State_DataWriteEnable = 1'b0;
wire  [8:1] EmitterModule_TopLevel_EmitterModule_NextState_Data;
wire  [8:1] EmitterModule_TopLevel_EmitterModule_NextState_DataDefault = 8'b00000000;
reg  EmitterModule_TopLevel_EmitterModule_NextState_DataWriteEnable = 1'b0;
wire  EmitterModule_TopLevel_EmitterModule_EmitterModule_L8F32T64_Expr;
wire signed  [33:1] EmitterModule_TopLevel_EmitterModule_EmitterModule_L8F32T64_ExprLhs;
wire signed  [33:1] EmitterModule_TopLevel_EmitterModule_EmitterModule_L8F32T64_ExprRhs;
wire  BoardSignals_Clock;
wire  BoardSignals_Reset;
wire  BoardSignals_Running;
wire  BoardSignals_Starting;
wire  BoardSignals_Started;
reg  InternalReset = 1'b0;
reg signed  [32:1] EmitterModule_TopLevel_EmitterModule_State_FSMQ = 32'b00000000000000000000000000000000;
reg signed  [32:1] EmitterModule_TopLevel_EmitterModule_State_FSMD = 32'b00000000000000000000000000000000;
reg signed  [32:1] EmitterModule_TopLevel_EmitterModule_NextState_FSMQ = 32'b00000000000000000000000000000000;
reg signed  [32:1] EmitterModule_TopLevel_EmitterModule_NextState_FSMD = 32'b00000000000000000000000000000000;
reg  [8:1] EmitterModule_TopLevel_EmitterModule_State_DataQ = 8'b00000000;
reg  [8:1] EmitterModule_TopLevel_EmitterModule_State_DataD = 8'b00000000;
reg  [8:1] EmitterModule_TopLevel_EmitterModule_NextState_DataQ = 8'b00000000;
reg  [8:1] EmitterModule_TopLevel_EmitterModule_NextState_DataD = 8'b00000000;
work_Quokka_BoardSignalsProc EmitterModule_TopLevel_EmitterModule_BoardSignalsConnection(BoardSignals_Clock,BoardSignals_Reset,BoardSignals_Running,BoardSignals_Starting,BoardSignals_Started,EmitterModule_TopLevel_EmitterModule_Clock,EmitterModule_TopLevel_EmitterModule_Reset,InternalReset);
always @(posedge BoardSignals_Clock)
begin
if ( BoardSignals_Reset == 1 ) begin
EmitterModule_TopLevel_EmitterModule_State_FSMQ <= EmitterModule_TopLevel_EmitterModule_State_FSMDefault;
end
else if ( EmitterModule_TopLevel_EmitterModule_State_FSMWriteEnable == 1 ) begin
EmitterModule_TopLevel_EmitterModule_State_FSMQ <= EmitterModule_TopLevel_EmitterModule_State_FSMD;
end
else begin
EmitterModule_TopLevel_EmitterModule_State_FSMQ <= EmitterModule_TopLevel_EmitterModule_State_FSMQ;
end
end
always @(posedge BoardSignals_Clock)
begin
if ( BoardSignals_Reset == 1 ) begin
EmitterModule_TopLevel_EmitterModule_NextState_FSMQ <= EmitterModule_TopLevel_EmitterModule_NextState_FSMDefault;
end
else if ( EmitterModule_TopLevel_EmitterModule_NextState_FSMWriteEnable == 1 ) begin
EmitterModule_TopLevel_EmitterModule_NextState_FSMQ <= EmitterModule_TopLevel_EmitterModule_NextState_FSMD;
end
else begin
EmitterModule_TopLevel_EmitterModule_NextState_FSMQ <= EmitterModule_TopLevel_EmitterModule_NextState_FSMQ;
end
end
always @(posedge BoardSignals_Clock)
begin
if ( BoardSignals_Reset == 1 ) begin
EmitterModule_TopLevel_EmitterModule_State_DataQ <= EmitterModule_TopLevel_EmitterModule_State_DataDefault;
end
else if ( EmitterModule_TopLevel_EmitterModule_State_DataWriteEnable == 1 ) begin
EmitterModule_TopLevel_EmitterModule_State_DataQ <= EmitterModule_TopLevel_EmitterModule_State_DataD;
end
else begin
EmitterModule_TopLevel_EmitterModule_State_DataQ <= EmitterModule_TopLevel_EmitterModule_State_DataQ;
end
end
always @(posedge BoardSignals_Clock)
begin
if ( BoardSignals_Reset == 1 ) begin
EmitterModule_TopLevel_EmitterModule_NextState_DataQ <= EmitterModule_TopLevel_EmitterModule_NextState_DataDefault;
end
else if ( EmitterModule_TopLevel_EmitterModule_NextState_DataWriteEnable == 1 ) begin
EmitterModule_TopLevel_EmitterModule_NextState_DataQ <= EmitterModule_TopLevel_EmitterModule_NextState_DataD;
end
else begin
EmitterModule_TopLevel_EmitterModule_NextState_DataQ <= EmitterModule_TopLevel_EmitterModule_NextState_DataQ;
end
end
assign EmitterModule_TopLevel_EmitterModule_EmitterModule_L8F32T64_Expr = EmitterModule_TopLevel_EmitterModule_EmitterModule_L8F32T64_ExprLhs == EmitterModule_TopLevel_EmitterModule_EmitterModule_L8F32T64_ExprRhs ? 1'b1 : 1'b0;
	assign EmitterModule_TopLevel_EmitterModuleIsEnabled = EmitterModuleIsEnabled;
	assign EmitterModule_TopLevel_EmitterModuleAck = EmitterModuleAck;
// Top-level entity connections
assign EmitterModule_TopLevel_Clock = Clock;
work_Quokka_Metastability EmitterModule_TopLevel_Reset_mtsb (BoardSignals_Clock, BoardSignals_Reset, ~Reset, EmitterModule_TopLevel_Reset); // Inverted
assign EmitterModuleData = EmitterModule_TopLevel_EmitterModuleData;
assign EmitterModuleHasData = EmitterModule_TopLevel_EmitterModuleHasData;
assign EmitterModule_TopLevel_EmitterModule_State_FSM = EmitterModule_TopLevel_EmitterModule_State_FSMQ;
assign EmitterModule_TopLevel_EmitterModule_NextState_FSM = EmitterModule_TopLevel_EmitterModule_NextState_FSMQ;
assign EmitterModule_TopLevel_EmitterModule_State_Data = EmitterModule_TopLevel_EmitterModule_State_DataQ;
assign EmitterModule_TopLevel_EmitterModule_NextState_Data = EmitterModule_TopLevel_EmitterModule_NextState_DataQ;
assign EmitterModule_TopLevel_EmitterModule_Clock = EmitterModule_TopLevel_Clock;
assign EmitterModule_TopLevel_EmitterModule_Reset = EmitterModule_TopLevel_Reset;
assign EmitterModule_TopLevel_EmitterModule_IsEnabled = EmitterModule_TopLevel_EmitterModuleIsEnabled;
assign EmitterModule_TopLevel_EmitterModule_Ack = EmitterModule_TopLevel_EmitterModuleAck;
assign EmitterModule_TopLevel_EmitterModuleData = EmitterModule_TopLevel_EmitterModule_Data;
assign EmitterModule_TopLevel_EmitterModuleHasData = EmitterModule_TopLevel_EmitterModule_HasData;
assign EmitterModule_TopLevel_EmitterModule_EmitterModule_L8F32T64_ExprLhs = { {1{EmitterModule_TopLevel_EmitterModule_State_FSM[32]}}, EmitterModule_TopLevel_EmitterModule_State_FSM }/*expand*/;
assign EmitterModule_TopLevel_EmitterModule_EmitterModule_L8F32T64_ExprRhs = { {32{1'b0}}, EmitterModule_TopLevel_EmitterModule_EmitterModule_L8F45T64_Expr }/*expand*/;
assign EmitterModule_TopLevel_EmitterModule_Inputs_IsEnabled = EmitterModule_TopLevel_EmitterModule_IsEnabled;
assign EmitterModule_TopLevel_EmitterModule_Inputs_Ack = EmitterModule_TopLevel_EmitterModule_Ack;
assign EmitterModule_TopLevel_EmitterModule_Data = EmitterModule_TopLevel_EmitterModule_State_Data/*cast*/;
assign EmitterModule_TopLevel_EmitterModule_HasData = EmitterModule_TopLevel_EmitterModule_EmitterModule_L8F32T64_Expr;
// [BEGIN USER ARCHITECTURE]
// [END USER ARCHITECTURE]
endmodule
