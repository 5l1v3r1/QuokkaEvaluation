`default_nettype none
// PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
// * This file was generated by Quokka FPGA Toolkit.
// * Generated code is your property, do whatever you want with it
// * Place custom code between [BEGIN USER ***] and [END USER ***].
// * CAUTION: All code outside of [USER] scope is subject to regeneration.
// * Bad things happen sometimes in developer's life,
//   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
// * Internal structure of code is subject to change.
//   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
// * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
// * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
// 
// DISCLAIMER:
//   Code comes AS-IS, it is your responsibility to make sure it is working as expected
//   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
// 
// System configuration name is SDP_RF_RAMModule_TopLevel, clock frequency is 1Hz, Top-level
// FSM summary
// -- Packages
module SDP_RF_RAMModule_TopLevel (
// [BEGIN USER PORTS]
// [END USER PORTS]

	input  Clock,
	input  Reset,
	input  [7: 0] ReadAddress,
	input  [7: 0] WriteAddress,
	input  [7: 0] WriteData,
	input  WE,
	output [7: 0] Data
    );

// [BEGIN USER SIGNALS]
// [END USER SIGNALS]
localparam HiSignal = 1'b1;
localparam LoSignal = 1'b0;
wire  Zero = 1'b0;
wire  One = 1'b1;
wire  true = 1'b1;
wire  false = 1'b0;
wire  [8:1] Inputs_ReadAddress;
wire  [8:1] Inputs_WriteAddress;
wire  [8:1] Inputs_WriteData;
wire  Inputs_WE;
reg  [8:1] State_ReadData = 8'b00000000;
reg [8:1] State_Buff [0 : 255];
initial
begin
	integer i;
	for (i = 0; i < 256; i++)
		State_Buff[i] = 0;
	
	State_Buff[0] = 8'b00000000;
	State_Buff[1] = 8'b00000000;
	State_Buff[2] = 8'b00000000;
	State_Buff[3] = 8'b00000000;
	State_Buff[4] = 8'b00000000;
	State_Buff[5] = 8'b00000000;
	State_Buff[6] = 8'b00000000;
	State_Buff[7] = 8'b00000000;
	State_Buff[8] = 8'b00000000;
	State_Buff[9] = 8'b00000000;
	State_Buff[10] = 8'b00000000;
	State_Buff[11] = 8'b00000000;
	State_Buff[12] = 8'b00000000;
	State_Buff[13] = 8'b00000000;
	State_Buff[14] = 8'b00000000;
	State_Buff[15] = 8'b00000000;
	State_Buff[16] = 8'b00000000;
	State_Buff[17] = 8'b00000000;
	State_Buff[18] = 8'b00000000;
	State_Buff[19] = 8'b00000000;
	State_Buff[20] = 8'b00000000;
	State_Buff[21] = 8'b00000000;
	State_Buff[22] = 8'b00000000;
	State_Buff[23] = 8'b00000000;
	State_Buff[24] = 8'b00000000;
	State_Buff[25] = 8'b00000000;
	State_Buff[26] = 8'b00000000;
	State_Buff[27] = 8'b00000000;
	State_Buff[28] = 8'b00000000;
	State_Buff[29] = 8'b00000000;
	State_Buff[30] = 8'b00000000;
	State_Buff[31] = 8'b00000000;
	State_Buff[32] = 8'b00000000;
	State_Buff[33] = 8'b00000000;
	State_Buff[34] = 8'b00000000;
	State_Buff[35] = 8'b00000000;
	State_Buff[36] = 8'b00000000;
	State_Buff[37] = 8'b00000000;
	State_Buff[38] = 8'b00000000;
	State_Buff[39] = 8'b00000000;
	State_Buff[40] = 8'b00000000;
	State_Buff[41] = 8'b00000000;
	State_Buff[42] = 8'b00000000;
	State_Buff[43] = 8'b00000000;
	State_Buff[44] = 8'b00000000;
	State_Buff[45] = 8'b00000000;
	State_Buff[46] = 8'b00000000;
	State_Buff[47] = 8'b00000000;
	State_Buff[48] = 8'b00000000;
	State_Buff[49] = 8'b00000000;
	State_Buff[50] = 8'b00000000;
	State_Buff[51] = 8'b00000000;
	State_Buff[52] = 8'b00000000;
	State_Buff[53] = 8'b00000000;
	State_Buff[54] = 8'b00000000;
	State_Buff[55] = 8'b00000000;
	State_Buff[56] = 8'b00000000;
	State_Buff[57] = 8'b00000000;
	State_Buff[58] = 8'b00000000;
	State_Buff[59] = 8'b00000000;
	State_Buff[60] = 8'b00000000;
	State_Buff[61] = 8'b00000000;
	State_Buff[62] = 8'b00000000;
	State_Buff[63] = 8'b00000000;
	State_Buff[64] = 8'b00000000;
	State_Buff[65] = 8'b00000000;
	State_Buff[66] = 8'b00000000;
	State_Buff[67] = 8'b00000000;
	State_Buff[68] = 8'b00000000;
	State_Buff[69] = 8'b00000000;
	State_Buff[70] = 8'b00000000;
	State_Buff[71] = 8'b00000000;
	State_Buff[72] = 8'b00000000;
	State_Buff[73] = 8'b00000000;
	State_Buff[74] = 8'b00000000;
	State_Buff[75] = 8'b00000000;
	State_Buff[76] = 8'b00000000;
	State_Buff[77] = 8'b00000000;
	State_Buff[78] = 8'b00000000;
	State_Buff[79] = 8'b00000000;
	State_Buff[80] = 8'b00000000;
	State_Buff[81] = 8'b00000000;
	State_Buff[82] = 8'b00000000;
	State_Buff[83] = 8'b00000000;
	State_Buff[84] = 8'b00000000;
	State_Buff[85] = 8'b00000000;
	State_Buff[86] = 8'b00000000;
	State_Buff[87] = 8'b00000000;
	State_Buff[88] = 8'b00000000;
	State_Buff[89] = 8'b00000000;
	State_Buff[90] = 8'b00000000;
	State_Buff[91] = 8'b00000000;
	State_Buff[92] = 8'b00000000;
	State_Buff[93] = 8'b00000000;
	State_Buff[94] = 8'b00000000;
	State_Buff[95] = 8'b00000000;
	State_Buff[96] = 8'b00000000;
	State_Buff[97] = 8'b00000000;
	State_Buff[98] = 8'b00000000;
	State_Buff[99] = 8'b00000000;
	State_Buff[100] = 8'b00000000;
	State_Buff[101] = 8'b00000000;
	State_Buff[102] = 8'b00000000;
	State_Buff[103] = 8'b00000000;
	State_Buff[104] = 8'b00000000;
	State_Buff[105] = 8'b00000000;
	State_Buff[106] = 8'b00000000;
	State_Buff[107] = 8'b00000000;
	State_Buff[108] = 8'b00000000;
	State_Buff[109] = 8'b00000000;
	State_Buff[110] = 8'b00000000;
	State_Buff[111] = 8'b00000000;
	State_Buff[112] = 8'b00000000;
	State_Buff[113] = 8'b00000000;
	State_Buff[114] = 8'b00000000;
	State_Buff[115] = 8'b00000000;
	State_Buff[116] = 8'b00000000;
	State_Buff[117] = 8'b00000000;
	State_Buff[118] = 8'b00000000;
	State_Buff[119] = 8'b00000000;
	State_Buff[120] = 8'b00000000;
	State_Buff[121] = 8'b00000000;
	State_Buff[122] = 8'b00000000;
	State_Buff[123] = 8'b00000000;
	State_Buff[124] = 8'b00000000;
	State_Buff[125] = 8'b00000000;
	State_Buff[126] = 8'b00000000;
	State_Buff[127] = 8'b00000000;
	State_Buff[128] = 8'b00000000;
	State_Buff[129] = 8'b00000000;
	State_Buff[130] = 8'b00000000;
	State_Buff[131] = 8'b00000000;
	State_Buff[132] = 8'b00000000;
	State_Buff[133] = 8'b00000000;
	State_Buff[134] = 8'b00000000;
	State_Buff[135] = 8'b00000000;
	State_Buff[136] = 8'b00000000;
	State_Buff[137] = 8'b00000000;
	State_Buff[138] = 8'b00000000;
	State_Buff[139] = 8'b00000000;
	State_Buff[140] = 8'b00000000;
	State_Buff[141] = 8'b00000000;
	State_Buff[142] = 8'b00000000;
	State_Buff[143] = 8'b00000000;
	State_Buff[144] = 8'b00000000;
	State_Buff[145] = 8'b00000000;
	State_Buff[146] = 8'b00000000;
	State_Buff[147] = 8'b00000000;
	State_Buff[148] = 8'b00000000;
	State_Buff[149] = 8'b00000000;
	State_Buff[150] = 8'b00000000;
	State_Buff[151] = 8'b00000000;
	State_Buff[152] = 8'b00000000;
	State_Buff[153] = 8'b00000000;
	State_Buff[154] = 8'b00000000;
	State_Buff[155] = 8'b00000000;
	State_Buff[156] = 8'b00000000;
	State_Buff[157] = 8'b00000000;
	State_Buff[158] = 8'b00000000;
	State_Buff[159] = 8'b00000000;
	State_Buff[160] = 8'b00000000;
	State_Buff[161] = 8'b00000000;
	State_Buff[162] = 8'b00000000;
	State_Buff[163] = 8'b00000000;
	State_Buff[164] = 8'b00000000;
	State_Buff[165] = 8'b00000000;
	State_Buff[166] = 8'b00000000;
	State_Buff[167] = 8'b00000000;
	State_Buff[168] = 8'b00000000;
	State_Buff[169] = 8'b00000000;
	State_Buff[170] = 8'b00000000;
	State_Buff[171] = 8'b00000000;
	State_Buff[172] = 8'b00000000;
	State_Buff[173] = 8'b00000000;
	State_Buff[174] = 8'b00000000;
	State_Buff[175] = 8'b00000000;
	State_Buff[176] = 8'b00000000;
	State_Buff[177] = 8'b00000000;
	State_Buff[178] = 8'b00000000;
	State_Buff[179] = 8'b00000000;
	State_Buff[180] = 8'b00000000;
	State_Buff[181] = 8'b00000000;
	State_Buff[182] = 8'b00000000;
	State_Buff[183] = 8'b00000000;
	State_Buff[184] = 8'b00000000;
	State_Buff[185] = 8'b00000000;
	State_Buff[186] = 8'b00000000;
	State_Buff[187] = 8'b00000000;
	State_Buff[188] = 8'b00000000;
	State_Buff[189] = 8'b00000000;
	State_Buff[190] = 8'b00000000;
	State_Buff[191] = 8'b00000000;
	State_Buff[192] = 8'b00000000;
	State_Buff[193] = 8'b00000000;
	State_Buff[194] = 8'b00000000;
	State_Buff[195] = 8'b00000000;
	State_Buff[196] = 8'b00000000;
	State_Buff[197] = 8'b00000000;
	State_Buff[198] = 8'b00000000;
	State_Buff[199] = 8'b00000000;
	State_Buff[200] = 8'b00000000;
	State_Buff[201] = 8'b00000000;
	State_Buff[202] = 8'b00000000;
	State_Buff[203] = 8'b00000000;
	State_Buff[204] = 8'b00000000;
	State_Buff[205] = 8'b00000000;
	State_Buff[206] = 8'b00000000;
	State_Buff[207] = 8'b00000000;
	State_Buff[208] = 8'b00000000;
	State_Buff[209] = 8'b00000000;
	State_Buff[210] = 8'b00000000;
	State_Buff[211] = 8'b00000000;
	State_Buff[212] = 8'b00000000;
	State_Buff[213] = 8'b00000000;
	State_Buff[214] = 8'b00000000;
	State_Buff[215] = 8'b00000000;
	State_Buff[216] = 8'b00000000;
	State_Buff[217] = 8'b00000000;
	State_Buff[218] = 8'b00000000;
	State_Buff[219] = 8'b00000000;
	State_Buff[220] = 8'b00000000;
	State_Buff[221] = 8'b00000000;
	State_Buff[222] = 8'b00000000;
	State_Buff[223] = 8'b00000000;
	State_Buff[224] = 8'b00000000;
	State_Buff[225] = 8'b00000000;
	State_Buff[226] = 8'b00000000;
	State_Buff[227] = 8'b00000000;
	State_Buff[228] = 8'b00000000;
	State_Buff[229] = 8'b00000000;
	State_Buff[230] = 8'b00000000;
	State_Buff[231] = 8'b00000000;
	State_Buff[232] = 8'b00000000;
	State_Buff[233] = 8'b00000000;
	State_Buff[234] = 8'b00000000;
	State_Buff[235] = 8'b00000000;
	State_Buff[236] = 8'b00000000;
	State_Buff[237] = 8'b00000000;
	State_Buff[238] = 8'b00000000;
	State_Buff[239] = 8'b00000000;
	State_Buff[240] = 8'b00000000;
	State_Buff[241] = 8'b00000000;
	State_Buff[242] = 8'b00000000;
	State_Buff[243] = 8'b00000000;
	State_Buff[244] = 8'b00000000;
	State_Buff[245] = 8'b00000000;
	State_Buff[246] = 8'b00000000;
	State_Buff[247] = 8'b00000000;
	State_Buff[248] = 8'b00000000;
	State_Buff[249] = 8'b00000000;
	State_Buff[250] = 8'b00000000;
	State_Buff[251] = 8'b00000000;
	State_Buff[252] = 8'b00000000;
	State_Buff[253] = 8'b00000000;
	State_Buff[254] = 8'b00000000;
	State_Buff[255] = 8'b00000000;
end
// inferred simple dual port RAM with read-first behaviour
always @ (posedge Clock)
begin
	if (Inputs_WE) 
		State_Buff[Inputs_WriteAddress] <= Inputs_WriteData;
		
	State_ReadData <= State_Buff[Inputs_ReadAddress];
end
assign Inputs_ReadAddress = ReadAddress/*cast*/;
assign Inputs_WriteAddress = WriteAddress/*cast*/;
assign Inputs_WriteData = WriteData/*cast*/;
assign Inputs_WE = WE;
assign Data = State_ReadData/*cast*/;
// [BEGIN USER ARCHITECTURE]
// [END USER ARCHITECTURE]
endmodule
