// PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
// * This file was generated by Quokka FPGA Toolkit.
// * Generated code is your property, do whatever you want with it
// * Place custom code between [BEGIN USER ***] and [END USER ***].
// * CAUTION: All code outside of [USER] scope is subject to regeneration.
// * Bad things happen sometimes in developer's life,
//   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
// * Internal structure of code is subject to change.
//   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
// * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
// * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
// 
// DISCLAIMER:
//   Code comes AS-IS, it is your responsibility to make sure it is working as expected
//   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
// 
// System configuration name is CompositionModule_TopLevel_CompositionModule_Emitter, clock frequency is 1Hz, Embedded
// FSM summary
// -- Packages
module CompositionModule_TopLevel_CompositionModule_Emitter (
// [BEGIN USER PORTS]
// [END USER PORTS]

	input  BoardSignals_Clock,
	input  BoardSignals_Reset,
	input  BoardSignals_Running,
	input  BoardSignals_Starting,
	input  BoardSignals_Started,
	input  EmitterModuleIsEnabled,
	input  EmitterModuleAck,
	output [8: 1] EmitterModuleData,
	output EmitterModuleHasData
    );

// [BEGIN USER SIGNALS]
// [END USER SIGNALS]
localparam HiSignal = 1'b1;
localparam LoSignal = 1'b0;
wire  CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModuleIsEnabled;
wire  CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModuleAck;
wire  [8:1] CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModuleData;
wire  CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModuleHasData;
wire  CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_IsEnabled;
wire  CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_Ack;
wire  [8:1] CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_Data;
wire  CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_HasData;
wire  CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_Zero = 1'b0;
wire  CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_One = 1'b1;
wire  CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_true = 1'b1;
wire  CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_false = 1'b0;
wire  CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_EmitterModule_L8F45T64_Expr = 1'b0;
wire  CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_Inputs_IsEnabled;
wire  CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_Inputs_Ack;
wire signed  [32:1] CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_FSM;
wire signed  [32:1] CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_FSMDefault = 32'b00000000000000000000000000000000;
reg  CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_FSMWriteEnable = 1'b0;
wire signed  [32:1] CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_FSM;
wire signed  [32:1] CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_FSMDefault = 32'b00000000000000000000000000000000;
reg  CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_FSMWriteEnable = 1'b0;
wire  [8:1] CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_Data;
wire  [8:1] CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_DataDefault = 8'b00000000;
reg  CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_DataWriteEnable = 1'b0;
wire  [8:1] CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_Data;
wire  [8:1] CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_DataDefault = 8'b00000000;
reg  CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_DataWriteEnable = 1'b0;
wire  CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_EmitterModule_L8F32T64_Expr;
wire signed  [33:1] CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_EmitterModule_L8F32T64_ExprLhs;
wire signed  [33:1] CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_EmitterModule_L8F32T64_ExprRhs;
reg signed  [32:1] CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_FSMQ = 32'b00000000000000000000000000000000;
reg signed  [32:1] CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_FSMD = 32'b00000000000000000000000000000000;
reg signed  [32:1] CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_FSMQ = 32'b00000000000000000000000000000000;
reg signed  [32:1] CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_FSMD = 32'b00000000000000000000000000000000;
reg  [8:1] CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_DataQ = 8'b00000000;
reg  [8:1] CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_DataD = 8'b00000000;
reg  [8:1] CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_DataQ = 8'b00000000;
reg  [8:1] CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_DataD = 8'b00000000;
always @(posedge BoardSignals_Clock)
begin
if ( BoardSignals_Reset == 1 ) begin
CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_FSMQ <= CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_FSMDefault;
end
else if ( CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_FSMWriteEnable == 1 ) begin
CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_FSMQ <= CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_FSMD;
end
else begin
CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_FSMQ <= CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_FSMQ;
end
end
always @(posedge BoardSignals_Clock)
begin
if ( BoardSignals_Reset == 1 ) begin
CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_FSMQ <= CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_FSMDefault;
end
else if ( CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_FSMWriteEnable == 1 ) begin
CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_FSMQ <= CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_FSMD;
end
else begin
CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_FSMQ <= CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_FSMQ;
end
end
always @(posedge BoardSignals_Clock)
begin
if ( BoardSignals_Reset == 1 ) begin
CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_DataQ <= CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_DataDefault;
end
else if ( CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_DataWriteEnable == 1 ) begin
CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_DataQ <= CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_DataD;
end
else begin
CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_DataQ <= CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_DataQ;
end
end
always @(posedge BoardSignals_Clock)
begin
if ( BoardSignals_Reset == 1 ) begin
CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_DataQ <= CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_DataDefault;
end
else if ( CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_DataWriteEnable == 1 ) begin
CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_DataQ <= CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_DataD;
end
else begin
CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_DataQ <= CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_DataQ;
end
end
assign CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_EmitterModule_L8F32T64_Expr = CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_EmitterModule_L8F32T64_ExprLhs == CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_EmitterModule_L8F32T64_ExprRhs ? 1'b1 : 1'b0;
	assign CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModuleIsEnabled = EmitterModuleIsEnabled;
	assign CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModuleAck = EmitterModuleAck;
assign EmitterModuleData = CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModuleData;
assign EmitterModuleHasData = CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModuleHasData;
assign CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_FSM = CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_FSMQ;
assign CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_FSM = CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_FSMQ;
assign CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_Data = CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_DataQ;
assign CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_Data = CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_NextState_DataQ;
assign CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_IsEnabled = CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModuleIsEnabled;
assign CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_Ack = CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModuleAck;
assign CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModuleData = CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_Data;
assign CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModuleHasData = CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_HasData;
assign CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_EmitterModule_L8F32T64_ExprLhs = { {1{CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_FSM[32]}}, CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_FSM }/*expand*/;
assign CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_EmitterModule_L8F32T64_ExprRhs = { {32{1'b0}}, CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_EmitterModule_L8F45T64_Expr }/*expand*/;
assign CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_Inputs_IsEnabled = CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_IsEnabled;
assign CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_Inputs_Ack = CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_Ack;
assign CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_Data = CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_State_Data/*cast*/;
assign CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_HasData = CompositionModule_TopLevel_CompositionModule_Emitter_EmitterModule_EmitterModule_L8F32T64_Expr;
// [BEGIN USER ARCHITECTURE]
// [END USER ARCHITECTURE]
endmodule
