-- PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
-- * This file was generated by Quokka FPGA Toolkit.
-- * Generated code is your property, do whatever you want with it
-- * Place custom code between [BEGIN USER ***] and [END USER ***].
-- * CAUTION: All code outside of [USER] scope is subject to regeneration.
-- * Bad things happen sometimes in developer's life,
--   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
-- * Internal structure of code is subject to change.
--   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
-- * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
-- * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
-- 
-- DISCLAIMER:
--   Code comes AS-IS, it is your responsibility to make sure it is working as expected
--   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
-- 
-- System configuration name is CounterModule_TopLevel, clock frequency is 1Hz, Top-level
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.Quokka.all;

entity CounterModule_TopLevel is
    port
    (
-- [BEGIN USER PORTS]
-- [END USER PORTS]

Clock : in  std_logic;
Reset : in  std_logic;
CounterModuleInReset : in  std_logic;
CounterModuleValue : out  unsigned(8 downto 1)
    );
end entity;

-- FSM summary
-- Packages
architecture rtl of CounterModule_TopLevel is
-- [BEGIN USER SIGNALS]
-- [END USER SIGNALS]
constant HiSignal : std_logic := '1';
constant LoSignal : std_logic := '0';
signal CounterModule_TopLevel_Clock : std_logic := '0';
signal CounterModule_TopLevel_Reset : std_logic := '0';
signal CounterModule_TopLevel_CounterModuleInReset : std_logic := '0';
signal CounterModule_TopLevel_CounterModuleValue : unsigned(8 downto 1) := (others => '0');
signal CounterModule_TopLevel_CounterModule_Clock : std_logic := '0';
signal CounterModule_TopLevel_CounterModule_Reset : std_logic := '0';
signal CounterModule_TopLevel_CounterModule_InReset : std_logic := '0';
signal CounterModule_TopLevel_CounterModule_Value : unsigned(8 downto 1) := (others => '0');
constant CounterModule_TopLevel_CounterModule_Zero : std_logic := '0';
constant CounterModule_TopLevel_CounterModule_One : std_logic := '1';
constant CounterModule_TopLevel_CounterModule_true : std_logic := '1';
constant CounterModule_TopLevel_CounterModule_false : std_logic := '0';
constant CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F48T61_Expr : std_logic := '0';
constant CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F85T86_Expr : std_logic := '1';
signal CounterModule_TopLevel_CounterModule_Inputs_InReset : std_logic := '0';
signal CounterModule_TopLevel_CounterModule_NextState_Value : unsigned(8 downto 1)  := "00000000";
signal CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F64T87_Expr : unsigned(8 downto 1)  := "00000000";
signal CounterModule_TopLevel_CounterModule_State_Value : unsigned(8 downto 1)  := "00000000";
constant CounterModule_TopLevel_CounterModule_State_ValueDefault : unsigned(8 downto 1)  := "00000000";
signal CounterModule_TopLevel_CounterModule_State_ValueWriteEnable : std_logic := '0';
signal CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F71T86_Expr : unsigned(10 downto 1)  := "0000000000";
signal CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F71T86_Expr_1 : signed(10 downto 1)  := "0000000000";
signal CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F71T86_Expr_2 : signed(10 downto 1)  := "0000000000";
signal CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F31T87_Lookup : unsigned(8 downto 1)  := "00000000";
signal CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F31T87_LookupMultiplexerAddress : std_logic := '0';
signal CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F31T87_Lookup1 : unsigned(8 downto 1)  := "00000000";
signal CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F31T87_Lookup2 : unsigned(8 downto 1)  := "00000000";
signal BoardSignals : BoardSignalsType;
signal InternalReset : std_logic := '0';
signal CounterModule_TopLevel_CounterModule_State_ValueQ : unsigned(8 downto 1)  := "00000000";
signal CounterModule_TopLevel_CounterModule_State_ValueD : unsigned(8 downto 1)  := "00000000";
begin
work.Quokka.BoardSignalsProc(BoardSignals,CounterModule_TopLevel_CounterModule_Clock,CounterModule_TopLevel_CounterModule_Reset,InternalReset);
process (BoardSignals, CounterModule_TopLevel_CounterModule_State_ValueD, CounterModule_TopLevel_CounterModule_State_ValueQ, CounterModule_TopLevel_CounterModule_State_ValueWriteEnable)
begin
if rising_edge(BoardSignals.Clock) then
if ( BoardSignals.Reset = '1' ) then
CounterModule_TopLevel_CounterModule_State_ValueQ <= CounterModule_TopLevel_CounterModule_State_ValueDefault;
elsif ( CounterModule_TopLevel_CounterModule_State_ValueWriteEnable = '1' ) then
CounterModule_TopLevel_CounterModule_State_ValueQ <= CounterModule_TopLevel_CounterModule_State_ValueD;
else
CounterModule_TopLevel_CounterModule_State_ValueQ <= CounterModule_TopLevel_CounterModule_State_ValueQ;
end if;
end if;
end process;

process(CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F71T86_Expr_1, CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F71T86_Expr_2)
begin
    CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F71T86_Expr <= resize(unsigned(signed(resize(CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F71T86_Expr_1, CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F71T86_Expr_1'length + 1)) + signed(resize(CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F71T86_Expr_2, CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F71T86_Expr_2'length + 1))), CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F71T86_Expr'length);

end process;
process(CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F31T87_Lookup1, CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F31T87_Lookup2, CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F31T87_LookupMultiplexerAddress)
begin
case CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F31T87_LookupMultiplexerAddress is
  when '0' => 
CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F31T87_Lookup <= CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F31T87_Lookup1;
  when '1' => 
CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F31T87_Lookup <= CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F31T87_Lookup2;
  when others => 
CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F31T87_Lookup <= "00000000";
end case;

end process;
process(CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F31T87_Lookup, CounterModule_TopLevel_CounterModule_State_Value)
begin
CounterModule_TopLevel_CounterModule_NextState_Value <= unsigned(CounterModule_TopLevel_CounterModule_State_Value);
CounterModule_TopLevel_CounterModule_NextState_Value <= unsigned(CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F31T87_Lookup);
end process;
-- Top-level entity connections
process(Clock, CounterModule_TopLevel_CounterModuleValue, CounterModuleInReset, Reset)
begin
	CounterModule_TopLevel_CounterModuleInReset <= CounterModuleInReset;
CounterModule_TopLevel_Clock <= Clock;
CounterModule_TopLevel_Reset <= NOT Reset;
CounterModuleValue <= CounterModule_TopLevel_CounterModuleValue;
end process;
process(CounterModule_TopLevel_Clock, CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F64T87_Expr, CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F71T86_Expr, CounterModule_TopLevel_CounterModule_Inputs_InReset, CounterModule_TopLevel_CounterModule_InReset, CounterModule_TopLevel_CounterModule_NextState_Value, CounterModule_TopLevel_CounterModule_State_Value, CounterModule_TopLevel_CounterModule_State_ValueQ, CounterModule_TopLevel_CounterModule_Value, CounterModule_TopLevel_CounterModuleInReset, CounterModule_TopLevel_Reset)
begin
CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F31T87_LookupMultiplexerAddress <= CounterModule_TopLevel_CounterModule_Inputs_InReset;
CounterModule_TopLevel_CounterModule_State_Value <= CounterModule_TopLevel_CounterModule_State_ValueQ;
CounterModule_TopLevel_CounterModule_State_ValueD <= CounterModule_TopLevel_CounterModule_NextState_Value;
CounterModule_TopLevel_CounterModule_State_ValueWriteEnable <= HiSignal;
CounterModule_TopLevel_CounterModule_Clock <= CounterModule_TopLevel_Clock;
CounterModule_TopLevel_CounterModule_Reset <= CounterModule_TopLevel_Reset;
CounterModule_TopLevel_CounterModule_InReset <= CounterModule_TopLevel_CounterModuleInReset;
CounterModule_TopLevel_CounterModuleValue <= CounterModule_TopLevel_CounterModule_Value;
CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F71T86_Expr_1 <= signed(resize(CounterModule_TopLevel_CounterModule_State_Value, CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F71T86_Expr_1'length));
CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F71T86_Expr_2 <= (1 => CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F85T86_Expr, others => '0');
CounterModule_TopLevel_CounterModule_Inputs_InReset <= CounterModule_TopLevel_CounterModule_InReset;
CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F64T87_Expr <= unsigned(CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F71T86_Expr(8 downto 1));
CounterModule_TopLevel_CounterModule_Value <= unsigned(CounterModule_TopLevel_CounterModule_State_Value);
CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F31T87_Lookup1 <= unsigned(CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F64T87_Expr);
CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F31T87_Lookup2 <= (1 => CounterModule_TopLevel_CounterModule_CounterModule_L19F9L22T10_CounterModule_L20F9L22T10_CounterModule_L21F48T61_Expr, others => '0');
end process;
-- [BEGIN USER ARCHITECTURE]
-- [END USER ARCHITECTURE]
end architecture;
