-- PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
-- * This file was generated by Quokka FPGA Toolkit.
-- * Generated code is your property, do whatever you want with it
-- * Place custom code between [BEGIN USER ***] and [END USER ***].
-- * CAUTION: All code outside of [USER] scope is subject to regeneration.
-- * Bad things happen sometimes in developer's life,
--   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
-- * Internal structure of code is subject to change.
--   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
-- * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
-- * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
-- 
-- DISCLAIMER:
--   Code comes AS-IS, it is your responsibility to make sure it is working as expected
--   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
-- 
-- System configuration name is EmitterModule_TopLevel, clock frequency is 1Hz, Top-level
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.Quokka.all;

entity EmitterModule_TopLevel is
    port
    (
-- [BEGIN USER PORTS]
-- [END USER PORTS]

Clock : in  std_logic;
Reset : in  std_logic;
IsEnabled : in  std_logic;
Ack : in  std_logic;
Data : out  unsigned(7 downto 0);
HasData : out  std_logic
    );
end entity;

-- FSM summary
-- Packages
architecture rtl of EmitterModule_TopLevel is
-- [BEGIN USER SIGNALS]
-- [END USER SIGNALS]
constant HiSignal : std_logic := '1';
constant LoSignal : std_logic := '0';
constant Zero : std_logic := '0';
constant One : std_logic := '1';
constant true : std_logic := '1';
constant false : std_logic := '0';
constant EmitterModule_L29F9L44T10_EmitterModule_L32F22T41_Expr : std_logic := '0';
constant EmitterModule_L29F9L44T10_EmitterModule_L34F41T65_Expr : std_logic := '1';
constant EmitterModule_L29F9L44T10_EmitterModule_L36F22T46_Expr : std_logic := '1';
constant EmitterModule_L29F9L44T10_EmitterModule_L38F21L41T22_EmitterModule_L39F41T60_Expr : std_logic := '0';
constant EmitterModule_L29F9L44T10_EmitterModule_L38F21L41T22_EmitterModule_L40F62T63_Expr : std_logic := '1';
constant EmitterModule_L26F45T64_Expr : std_logic := '0';
signal Inputs_IsEnabled : std_logic := '0';
signal Inputs_Ack : std_logic := '0';
signal NextState_FSM : std_logic := '0';
signal NextState_Data : unsigned(8 downto 1)  := "00000000";
signal EmitterModule_L29F9L44T10_EmitterModule_L38F21L41T22_EmitterModule_L40F42T64_Expr : unsigned(8 downto 1)  := "00000000";
signal State_FSM : std_logic := '0';
constant State_FSMDefault : std_logic := '0';
signal State_Data : unsigned(8 downto 1)  := "00000000";
constant State_DataDefault : unsigned(8 downto 1)  := "00000000";
signal EmitterModule_L29F9L44T10_EmitterModule_L38F21L41T22_EmitterModule_L40F49T63_Expr : unsigned(10 downto 1)  := "0000000000";
signal EmitterModule_L29F9L44T10_EmitterModule_L38F21L41T22_EmitterModule_L40F49T63_Expr_1 : signed(10 downto 1)  := "0000000000";
signal EmitterModule_L29F9L44T10_EmitterModule_L38F21L41T22_EmitterModule_L40F49T63_Expr_2 : signed(10 downto 1)  := "0000000000";
signal EmitterModule_L29F9L44T10_EmitterModule_L32F17L35T27_Case : std_logic := '0';
signal EmitterModule_L29F9L44T10_EmitterModule_L32F17L35T27_CaseLhs : signed(2 downto 1)  := "00";
signal EmitterModule_L29F9L44T10_EmitterModule_L32F17L35T27_CaseRhs : signed(2 downto 1)  := "00";
signal EmitterModule_L29F9L44T10_EmitterModule_L36F17L42T27_Case : std_logic := '0';
signal EmitterModule_L29F9L44T10_EmitterModule_L36F17L42T27_CaseLhs : signed(2 downto 1)  := "00";
signal EmitterModule_L29F9L44T10_EmitterModule_L36F17L42T27_CaseRhs : signed(2 downto 1)  := "00";
signal EmitterModule_L26F32T64_Expr : std_logic := '0';
signal EmitterModule_L26F32T64_ExprLhs : signed(2 downto 1)  := "00";
signal EmitterModule_L26F32T64_ExprRhs : signed(2 downto 1)  := "00";
signal BoardSignals : BoardSignalsType;
signal InternalReset : std_logic := '0';
begin
work.Quokka.BoardSignalsProc(BoardSignals,Clock,Reset,InternalReset);
process (BoardSignals, NextState_Data, NextState_FSM)
begin
if rising_edge(BoardSignals.Clock) then
if ( BoardSignals.Reset = '1' ) then
State_FSM <= State_FSMDefault;
State_Data <= State_DataDefault;
else
State_FSM <= NextState_FSM;
State_Data <= NextState_Data;
end if;
end if;
end process;
    EmitterModule_L29F9L44T10_EmitterModule_L32F17L35T27_Case <= '1' when (signed(resize(EmitterModule_L29F9L44T10_EmitterModule_L32F17L35T27_CaseLhs, EmitterModule_L29F9L44T10_EmitterModule_L32F17L35T27_CaseLhs'length + 1)) = signed(resize(EmitterModule_L29F9L44T10_EmitterModule_L32F17L35T27_CaseRhs, EmitterModule_L29F9L44T10_EmitterModule_L32F17L35T27_CaseRhs'length + 1))) else '0';
    EmitterModule_L29F9L44T10_EmitterModule_L36F17L42T27_Case <= '1' when (signed(resize(EmitterModule_L29F9L44T10_EmitterModule_L36F17L42T27_CaseLhs, EmitterModule_L29F9L44T10_EmitterModule_L36F17L42T27_CaseLhs'length + 1)) = signed(resize(EmitterModule_L29F9L44T10_EmitterModule_L36F17L42T27_CaseRhs, EmitterModule_L29F9L44T10_EmitterModule_L36F17L42T27_CaseRhs'length + 1))) else '0';
    EmitterModule_L26F32T64_Expr <= '1' when (signed(resize(EmitterModule_L26F32T64_ExprLhs, EmitterModule_L26F32T64_ExprLhs'length + 1)) = signed(resize(EmitterModule_L26F32T64_ExprRhs, EmitterModule_L26F32T64_ExprRhs'length + 1))) else '0';

process(EmitterModule_L29F9L44T10_EmitterModule_L38F21L41T22_EmitterModule_L40F49T63_Expr_1, EmitterModule_L29F9L44T10_EmitterModule_L38F21L41T22_EmitterModule_L40F49T63_Expr_2)
begin
    EmitterModule_L29F9L44T10_EmitterModule_L38F21L41T22_EmitterModule_L40F49T63_Expr <= resize(unsigned(signed(resize(EmitterModule_L29F9L44T10_EmitterModule_L38F21L41T22_EmitterModule_L40F49T63_Expr_1, EmitterModule_L29F9L44T10_EmitterModule_L38F21L41T22_EmitterModule_L40F49T63_Expr_1'length + 1)) + signed(resize(EmitterModule_L29F9L44T10_EmitterModule_L38F21L41T22_EmitterModule_L40F49T63_Expr_2, EmitterModule_L29F9L44T10_EmitterModule_L38F21L41T22_EmitterModule_L40F49T63_Expr_2'length + 1))), EmitterModule_L29F9L44T10_EmitterModule_L38F21L41T22_EmitterModule_L40F49T63_Expr'length);

end process;
process(EmitterModule_L29F9L44T10_EmitterModule_L32F17L35T27_Case, EmitterModule_L29F9L44T10_EmitterModule_L36F17L42T27_Case, EmitterModule_L29F9L44T10_EmitterModule_L38F21L41T22_EmitterModule_L40F42T64_Expr, Inputs_Ack, Inputs_IsEnabled, State_Data, State_FSM)
begin
NextState_FSM <= State_FSM;
NextState_Data <= unsigned(State_Data);
if ( EmitterModule_L29F9L44T10_EmitterModule_L32F17L35T27_Case = '1' ) then
if ( Inputs_IsEnabled = '1' ) then
NextState_FSM <= EmitterModule_L29F9L44T10_EmitterModule_L34F41T65_Expr;
end if;
elsif ( EmitterModule_L29F9L44T10_EmitterModule_L36F17L42T27_Case = '1' ) then
if ( Inputs_Ack = '1' ) then
NextState_FSM <= EmitterModule_L29F9L44T10_EmitterModule_L38F21L41T22_EmitterModule_L39F41T60_Expr;
NextState_Data <= unsigned(EmitterModule_L29F9L44T10_EmitterModule_L38F21L41T22_EmitterModule_L40F42T64_Expr);
end if;
end if;
end process;
-- Top-level entity connections
process(Ack, Clock, EmitterModule_TopLevel_Data, EmitterModule_TopLevel_HasData, IsEnabled, Reset)
begin
	EmitterModule_TopLevel_IsEnabled <= IsEnabled;
	EmitterModule_TopLevel_Ack <= Ack;
EmitterModule_TopLevel_Clock <= Clock;
EmitterModule_TopLevel_Reset <= NOT Reset;
Data <= EmitterModule_TopLevel_Data;
HasData <= EmitterModule_TopLevel_HasData;
end process;
process(Ack, EmitterModule_L26F32T64_Expr, EmitterModule_L29F9L44T10_EmitterModule_L38F21L41T22_EmitterModule_L40F49T63_Expr, IsEnabled, State_Data, State_FSM)
begin
EmitterModule_L29F9L44T10_EmitterModule_L32F17L35T27_CaseLhs <= (1 => State_FSM, others => '0');
EmitterModule_L29F9L44T10_EmitterModule_L32F17L35T27_CaseRhs <= (1 => EmitterModule_L29F9L44T10_EmitterModule_L32F22T41_Expr, others => '0');
EmitterModule_L29F9L44T10_EmitterModule_L36F17L42T27_CaseLhs <= (1 => State_FSM, others => '0');
EmitterModule_L29F9L44T10_EmitterModule_L36F17L42T27_CaseRhs <= (1 => EmitterModule_L29F9L44T10_EmitterModule_L36F22T46_Expr, others => '0');
EmitterModule_L26F32T64_ExprLhs <= (1 => State_FSM, others => '0');
EmitterModule_L26F32T64_ExprRhs <= (1 => EmitterModule_L26F45T64_Expr, others => '0');
EmitterModule_L29F9L44T10_EmitterModule_L38F21L41T22_EmitterModule_L40F49T63_Expr_1 <= signed(resize(State_Data, EmitterModule_L29F9L44T10_EmitterModule_L38F21L41T22_EmitterModule_L40F49T63_Expr_1'length));
EmitterModule_L29F9L44T10_EmitterModule_L38F21L41T22_EmitterModule_L40F49T63_Expr_2 <= (1 => EmitterModule_L29F9L44T10_EmitterModule_L38F21L41T22_EmitterModule_L40F62T63_Expr, others => '0');
Inputs_IsEnabled <= IsEnabled;
Inputs_Ack <= Ack;
EmitterModule_L29F9L44T10_EmitterModule_L38F21L41T22_EmitterModule_L40F42T64_Expr <= unsigned(EmitterModule_L29F9L44T10_EmitterModule_L38F21L41T22_EmitterModule_L40F49T63_Expr(8 downto 1));
Data <= unsigned(State_Data);
HasData <= EmitterModule_L26F32T64_Expr;
end process;
-- [BEGIN USER ARCHITECTURE]
-- [END USER ARCHITECTURE]
end architecture;
