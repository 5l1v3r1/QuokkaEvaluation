-- PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
-- * This file was generated by Quokka FPGA Toolkit.
-- * Generated code is your property, do whatever you want with it
-- * Place custom code between [BEGIN USER ***] and [END USER ***].
-- * CAUTION: All code outside of [USER] scope is subject to regeneration.
-- * Bad things happen sometimes in developer's life,
--   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
-- * Internal structure of code is subject to change.
--   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
-- * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
-- * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
-- 
-- DISCLAIMER:
--   Code comes AS-IS, it is your responsibility to make sure it is working as expected
--   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
-- 
-- System configuration name is SynchronousROMModule_TopLevel, clock frequency is 1Hz, Top-level
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.Quokka.all;

entity SynchronousROMModule_TopLevel is
    port
    (
-- [BEGIN USER PORTS]
-- [END USER PORTS]

Clock : in  std_logic;
Reset : in  std_logic;
Addr1 : in  unsigned(7 downto 0);
Addr2 : in  unsigned(7 downto 0);
Data1 : out  unsigned(7 downto 0);
Data2 : out  unsigned(7 downto 0)
    );
end entity;

-- FSM summary
-- Packages
architecture rtl of SynchronousROMModule_TopLevel is
-- [BEGIN USER SIGNALS]
-- [END USER SIGNALS]
constant HiSignal : std_logic := '1';
constant LoSignal : std_logic := '0';
constant Zero : std_logic := '0';
constant One : std_logic := '1';
constant true : std_logic := '1';
constant false : std_logic := '0';
signal Inputs_Addr1 : unsigned(8 downto 1)  := "00000000";
signal Inputs_Addr2 : unsigned(8 downto 1)  := "00000000";
signal State_Data1 : unsigned(8 downto 1)  := "00000000";
signal State_Data2 : unsigned(8 downto 1)  := "00000000";
type State_BuffArray is array(0 to 255) of unsigned(8 downto 1);
constant State_BuffArrayInit: State_BuffArray:= (
"11100000",
"10101011",
"00100110",
"11010110",
"00110000",
"11101111",
"01101111",
"00101110",
"10001001",
"01110100",
"11011011",
"10110010",
"00110100",
"00111110",
"11110011",
"11001011",
"10100111",
"01111100",
"00100111",
"01101100",
"00011110",
"11110000",
"11111001",
"10001101",
"11011100",
"00011101",
"00001100",
"00010100",
"01000110",
"01110110",
"11010100",
"00010111",
"00000011",
"10001011",
"01101010",
"11101011",
"11111010",
"10010000",
"01111101",
"00001011",
"01001100",
"10011101",
"11101101",
"11010011",
"00111010",
"11011000",
"00100100",
"00110110",
"01111011",
"10000000",
"00111001",
"01001000",
"11111000",
"00010001",
"00101101",
"11000001",
"11100100",
"10110110",
"10100010",
"10000011",
"10000010",
"10101110",
"11001110",
"01001010",
"01101001",
"10010001",
"00001110",
"01011000",
"01011010",
"00001111",
"10010011",
"10110111",
"10000100",
"11000011",
"10111001",
"11101110",
"00110101",
"00011010",
"00101111",
"00000010",
"00000100",
"11010000",
"00110011",
"01100110",
"01000101",
"10100100",
"00000001",
"11101010",
"00010000",
"01100101",
"10100000",
"11101000",
"01010100",
"11110101",
"01000010",
"11100001",
"00000000",
"10100001",
"00101100",
"11111101",
"10000101",
"01100010",
"01110001",
"10000111",
"11101001",
"01100011",
"01101011",
"10111010",
"00101010",
"11000110",
"00011100",
"00100001",
"11000000",
"10001110",
"01100000",
"10101111",
"01011101",
"11110110",
"01110000",
"10101000",
"11010001",
"01111010",
"11110100",
"00000111",
"10110000",
"00111111",
"00000110",
"10000001",
"11110010",
"11011111",
"01010110",
"11001001",
"00101001",
"10100101",
"01011110",
"00001010",
"01010111",
"00101000",
"10111110",
"10101001",
"10111100",
"11100011",
"00011111",
"01110101",
"11001000",
"01111000",
"11010010",
"10011001",
"01101101",
"00010101",
"01000111",
"10010010",
"11100110",
"10111111",
"11111111",
"01010011",
"11110001",
"10010100",
"00001000",
"11011110",
"11111110",
"00111011",
"00111100",
"01110011",
"11100010",
"10110100",
"10011111",
"10100011",
"10011110",
"11110111",
"10110101",
"01000000",
"01001011",
"00001101",
"01011100",
"10001100",
"00100010",
"00010110",
"01001101",
"11000111",
"01001001",
"11100111",
"00111000",
"01101110",
"01100111",
"10001000",
"01000011",
"10101100",
"01010000",
"00001001",
"11010111",
"01010010",
"00010011",
"10001111",
"00011011",
"11001101",
"10010110",
"00011001",
"10100110",
"00010010",
"10110001",
"10111000",
"00111101",
"01101000",
"01001110",
"01011111",
"00110010",
"01111111",
"01010101",
"10111011",
"01001111",
"00100000",
"11010101",
"11101100",
"11000010",
"00100101",
"11000101",
"10001010",
"01011001",
"10011000",
"00110111",
"11001111",
"10110011",
"11001010",
"01100100",
"00110001",
"01110111",
"01111001",
"10011010",
"01110010",
"10011100",
"11011010",
"11000100",
"00000101",
"10010101",
"01111110",
"10101010",
"10010111",
"11111100",
"00100011",
"11011001",
"11100101",
"01100001",
"10000110",
"11111011",
"11011101",
"00011000",
"10111101",
"10011011",
"01011011",
"01000001",
"01000100",
"11001100",
"10101101",
"00101011",
"01010001"
);
signal State_Buff : State_BuffArray := State_BuffArrayInit;
begin
process (Clock, Reset)
begin
if rising_edge(Clock) then
if ( Reset = '1' ) then
else
end if;
end if;
end process;
process (Clock, State_Buff)
begin
if rising_edge(Clock) then
State_Data1 <= unsigned(State_Buff);
end if;
if rising_edge(Clock) then
State_Data2 <= unsigned(State_Buff);
end if;
end process;
process()
begin
end process;
-- Top-level entity connections
process(Addr1, Addr2, Clock, Reset, SynchronousROMModule_TopLevel_Data1, SynchronousROMModule_TopLevel_Data2)
begin
	SynchronousROMModule_TopLevel_Addr1 <= Addr1;
	SynchronousROMModule_TopLevel_Addr2 <= Addr2;
SynchronousROMModule_TopLevel_Clock <= Clock;
SynchronousROMModule_TopLevel_Reset <= NOT Reset;
Data1 <= SynchronousROMModule_TopLevel_Data1;
Data2 <= SynchronousROMModule_TopLevel_Data2;
end process;
process(Addr1, Addr2, State_Data1, State_Data2)
begin
Inputs_Addr1 <= unsigned(Addr1);
Inputs_Addr2 <= unsigned(Addr2);
Data1 <= unsigned(State_Data1);
Data2 <= unsigned(State_Data2);
end process;
-- [BEGIN USER ARCHITECTURE]
-- [END USER ARCHITECTURE]
end architecture;
